class Solution {
    int[]dp ;
    boolean[] cal;
    int[] sum;
    public String stoneGameIII(int[] stoneValue) {
        int n = stoneValue.length;
        sum = new int[n];
        sum[n-1] = stoneValue[n-1];
        for (int i = n - 2; i >= 0; i--) {
            sum[i] = sum[i+1] + stoneValue[i];
        }
        dp = new int[n];
        cal = new boolean[n];
        int val = helper(stoneValue, 0);
        if (val * 2 - sum[0] == 0) return "Tie";
        else if (val * 2 < sum[0]) return "Bob";
        return "Alice";
        
    }
    
    private int helper(int[] stoneValue, int idx) {
        int n = stoneValue.length;
        if (idx >= n) {
            return 0;
        }
        if (cal[idx]) {
            return dp[idx];
        }
        else{
            int min = Integer.MAX_VALUE;
            for (int i = 1; i <= 3; i++) {
                min = Math.min(helper(stoneValue, idx + i), min);
            }
            dp[idx] = sum[idx] - min;
            cal[idx] = true;
            return dp[idx];
        }
    }
}